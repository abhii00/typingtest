{"version":3,"sources":["index.js"],"names":["Title","className","React","Component","Word","props","word","WordDisplay","correct","wordID","wordType","this","wordList","map","index","renderWord","wordStates","Counter","value","Entry","type","onChange","handleChange","WPM","TypingTest","consts","wordsTotal","testTime","intervalTime","state","dictionarySource","dictionary","Array","fill","wordTimes","wordWPMs","timeRemaining","startTime","testing","wordsCorrect","wordsIncorrect","currentEntry","currentWord","startTest","bind","endTest","entryUpdate","checkTimer","fetch","then","r","text","setState","split","console","log","tempwordList","i","length","j","Math","floor","random","slice","Date","now","interval","setInterval","clearInterval","e","target","tcW","twS","twC","twI","twT","join","round","renderWordCounters","renderTimer","renderWordDisplay","renderWPM","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9998c67.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css'\r\n\r\nclass Title extends React.Component\r\n//component for the title\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"title\">\r\n                A Simple Typing Test\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Word(props)\r\n//component for individual words\r\n{\r\n    return(\r\n        <nobr className={props.className}>\r\n            {props.word}\r\n            &nbsp;\r\n        </nobr>\r\n    );\r\n}\r\n\r\nclass WordDisplay extends React.Component\r\n//component to display words for test\r\n{\r\n    renderWord(word, correct, wordID)\r\n    {\r\n        var wordType;\r\n        switch (correct){\r\n            case true:\r\n                wordType = \"word-correct\";\r\n                break;\r\n            case false:\r\n                wordType = \"word-incorrect\";\r\n                break;\r\n            default:\r\n                wordType = \"word\";\r\n                break;\r\n        }\r\n        return <Word word={word} className={wordType} key={wordID}/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                {this.props.wordList.map((word, index) => (\r\n                    this.renderWord(word, this.props.wordStates[index], index)\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Counter(props)\r\n//component for simple number display\r\n{\r\n    return(\r\n        <div className={props.className}> \r\n            {props.value}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Entry extends React.Component\r\n//component for word entry\r\n{\r\n    render(){\r\n        return(\r\n            <input type=\"text\" className=\"entry\" onChange={this.props.handleChange}></input>\r\n        );\r\n    }\r\n}\r\n\r\nclass WPM extends React.Component\r\n//component for wpm\r\n{\r\n    render(){\r\n        return(\r\n            <div className=\"wpm\r\n            \">\r\n                {this.props.WPM} words/minute\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TypingTest extends React.Component\r\n//component for overall typing test\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.consts = {\r\n            wordsTotal: 200,\r\n\r\n            testTime: 10,\r\n            intervalTime: 0.01\r\n        }\r\n\r\n        this.state = {\r\n            dictionarySource: \"./dictionaries/dict_test.txt\",\r\n            dictionary: Array(0).fill(null),\r\n            wordList: Array(this.consts.wordsTotal).fill(null),\r\n            wordStates: Array(this.consts.wordsTotal).fill(null),\r\n            wordTimes: Array(this.consts.wordsTotal).fill(null),\r\n            wordWPMs: Array(this.consts.wordsTotal).fill(null),\r\n\r\n            timeRemaining: this.consts.testTime,\r\n            startTime: 0,\r\n\r\n            testing: \"pre\",\r\n            wordsCorrect: 0,\r\n            wordsIncorrect: 0,\r\n            currentEntry: \"\",\r\n            currentWord: 0,\r\n        };\r\n\r\n        this.startTest = this.startTest.bind(this);\r\n        this.endTest = this.endTest.bind(this);\r\n        this.entryUpdate = this.entryUpdate.bind(this);\r\n        this.checkTimer = this.checkTimer.bind(this);\r\n    }\r\n\r\n    startTest(){ \r\n        fetch(this.state.dictionarySource)\r\n        .then((r) => r.text())\r\n        .then(text  => {\r\n            this.setState({dictionary: text.split(\"\\r\\n\")});\r\n            console.log(\"Dictionary Loaded\"); \r\n\r\n            var tempwordList = this.state.dictionary;\r\n            for (let i = tempwordList.length - 1; i > 0; i--) {\r\n                const j = Math.floor(Math.random() * (i + 1));\r\n                [tempwordList[i], tempwordList[j]] = [tempwordList[j], tempwordList[i]];\r\n            }\r\n            tempwordList.slice(0,this.consts.wordsTotal);\r\n            this.setState({wordList: tempwordList});\r\n            console.log(\"Word List Loaded\"); \r\n        }) \r\n        \r\n        this.setState({\r\n            testing: \"test\",\r\n            startTime: Date.now(),\r\n        });\r\n        this.interval = setInterval(this.checkTimer, this.consts.intervalTime*1000);\r\n\r\n        console.log(\"Test Started\");\r\n    }\r\n\r\n    endTest(){\r\n        this.setState({\r\n            testing: \"post\",\r\n            startTime: Date.now(),\r\n            WPM: this.state.wordsCorrect*60/this.consts.testTime,\r\n        });\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    checkTimer(){\r\n        this.setState({\r\n            timeRemaining: (this.state.startTime + this.consts.testTime*1000 - Date.now())/1000\r\n        })\r\n\r\n        if (this.state.timeRemaining <= 0){\r\n            this.endTest();\r\n        }\r\n    }\r\n\r\n    entryUpdate(e){\r\n        var entryString = e.target.value;\r\n        var currentEntry = entryString.split(\"\")\r\n\r\n        if (currentEntry[currentEntry.length - 1] === \" \"){\r\n            var tcW = this.state.currentWord + 1;\r\n            var twS = this.state.wordStates;\r\n            var twC = this.state.wordsCorrect;\r\n            var twI = this.state.wordsIncorrect;\r\n            var twT = this.state.wordTimes;\r\n            \r\n            if (currentEntry.join(\"\") === this.state.wordList[this.state.currentWord] + \" \"){\r\n                twS[this.state.currentWord] = true;\r\n                twT[this.state.wordTimes] = this.consts.testTime - this.state.timeRemaining;\r\n                twC += 1;\r\n                console.log(\"Correct Word\");\r\n            }\r\n            else{\r\n                twS[this.state.currentWord] = false;\r\n                twI += 1;\r\n                console.log(\"Incorrect Word\");\r\n            }\r\n\r\n            this.setState({\r\n                currentWord: tcW,\r\n                wordStates: twS,\r\n                wordTimes: twT,\r\n                wordsCorrect: twC,\r\n                wordsIncorrect: twI,\r\n            })\r\n\r\n            e.target.value = \"\"\r\n        }\r\n    }\r\n\r\n    renderWordCounters(){\r\n        return (\r\n        <div className = \"container-counter\">\r\n            <Counter value={this.state.wordsCorrect} className=\"counter-correct\"/>\r\n            <Counter value={this.state.wordsIncorrect} className=\"counter-incorrect\"/>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    renderTimer(){\r\n        return <Counter value={Math.round(this.state.timeRemaining*10)/10} className=\"timer\"/>;\r\n    }\r\n\r\n    renderWordDisplay(){\r\n        return <WordDisplay wordList={this.state.wordList} wordStates={this.state.wordStates}/>;\r\n    }\r\n\r\n    renderWPM(){\r\n        return <WPM WPM={this.state.WPM} className=\"wpm\"/>;\r\n    }\r\n\r\n    render() {\r\n        switch (this.state.testing){\r\n            case \"pre\":\r\n                return (\r\n                    <div>\r\n                        <Title/>\r\n                        {this.renderWordCounters()}\r\n                        {this.renderTimer()}\r\n                        {this.renderWordDisplay()}\r\n                        <Entry handleChange={this.startTest}/>\r\n                    </div>\r\n                );\r\n            case \"test\":\r\n                return (\r\n                    <div>\r\n                        <Title/>\r\n                        {this.renderWordCounters()}\r\n                        {this.renderTimer()}\r\n                        {this.renderWordDisplay()}\r\n                        <Entry handleChange={this.entryUpdate}/>\r\n                    </div>\r\n                );\r\n            case \"post\":\r\n                return(\r\n                    <div>\r\n                        <Title/>\r\n                        {this.renderWordCounters()}\r\n                        {this.renderWPM()}\r\n                    </div>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n//render typing test\r\nReactDOM.render(\r\n    <TypingTest />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}